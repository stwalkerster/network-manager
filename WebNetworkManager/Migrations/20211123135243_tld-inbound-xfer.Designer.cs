// <auto-generated />
using System;
using DnsWebApp.Models.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DnsWebApp.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20211123135243_tld-inbound-xfer")]
    partial class tldinboundxfer
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("DnsWebApp.Models.Database.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<decimal?>("ExchangeRate")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("ExchangeRateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Symbol")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("DnsWebApp.Models.Database.Domain", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.Property<bool>("Placeholder")
                        .HasColumnType("boolean");

                    b.Property<long?>("RegistrarId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RegistrationExpiry")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("TopLevelDomainId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("WhoisLastUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RegistrarId");

                    b.HasIndex("TopLevelDomainId");

                    b.HasIndex("Name", "TopLevelDomainId")
                        .IsUnique();

                    b.ToTable("Domains");
                });

            modelBuilder.Entity("DnsWebApp.Models.Database.FavouriteDomains", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ZoneId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ZoneId");

                    b.ToTable("FavouriteDomains");
                });

            modelBuilder.Entity("DnsWebApp.Models.Database.HorizonView", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ViewName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ViewTag")
                        .HasColumnType("text");

                    b.Property<string>("ViewTagColour")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("HorizonViews");
                });

            modelBuilder.Entity("DnsWebApp.Models.Database.Record", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("TimeToLive")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ZoneGroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ZoneId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ZoneGroupId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Record");
                });

            modelBuilder.Entity("DnsWebApp.Models.Database.Registrar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("AllowRenewals")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowTransfers")
                        .HasColumnType("boolean");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("PricesIncludeVat")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("PrivacyFee")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TransferOutFee")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Registrar");
                });

            modelBuilder.Entity("DnsWebApp.Models.Database.RegistrarTldSupport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("AllowInboundTransfer")
                        .HasColumnType("boolean");

                    b.Property<bool>("PrivacyIncluded")
                        .HasColumnType("boolean");

                    b.Property<long>("RegistrarId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("RenewalPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("RenewalPriceUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("TopLevelDomainId")
                        .HasColumnType("bigint");

                    b.Property<bool>("TransferIncludesRenewal")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("TransferPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("TopLevelDomainId");

                    b.HasIndex("RegistrarId", "TopLevelDomainId")
                        .IsUnique();

                    b.ToTable("RegistrarTldSupport");
                });

            modelBuilder.Entity("DnsWebApp.Models.Database.TopLevelDomain", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Registry")
                        .HasColumnType("text");

                    b.Property<string>("RegistryUrl")
                        .HasColumnType("text");

                    b.Property<string>("WhoisExpiryDateFormat")
                        .HasColumnType("text");

                    b.Property<string>("WhoisServer")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Domain")
                        .IsUnique();

                    b.ToTable("TopLevelDomains");
                });

            modelBuilder.Entity("DnsWebApp.Models.Database.Zone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Administrator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("DefaultTimeToLive")
                        .HasColumnType("bigint");

                    b.Property<long>("DomainId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<long>("Expire")
                        .HasColumnType("bigint");

                    b.Property<long?>("HorizonViewId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryNameServer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Refresh")
                        .HasColumnType("bigint");

                    b.Property<long>("Retry")
                        .HasColumnType("bigint");

                    b.Property<long>("SerialNumber")
                        .HasColumnType("bigint");

                    b.Property<long>("TimeToLive")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("HorizonViewId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("DomainId", "HorizonViewId")
                        .IsUnique();

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("DnsWebApp.Models.Database.ZoneGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("ZoneGroups");
                });

            modelBuilder.Entity("DnsWebApp.Models.Database.ZoneGroupMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("ZoneGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("ZoneId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ZoneGroupId");

                    b.HasIndex("ZoneId");

                    b.ToTable("ZoneGroupMember");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "284c3141-b367-4021-84d1-a07fb08d8cbb",
                            ConcurrencyStamp = "a4ba0213-0009-48f2-b6e8-9cb2ba57cb59",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "5ebbe632-591d-4a9c-9957-bcde9c37e436",
                            ConcurrencyStamp = "dd1bb96f-5bf5-4e4a-9e53-08369f1f21e2",
                            Name = "DNS Manager",
                            NormalizedName = "DNS MANAGER"
                        },
                        new
                        {
                            Id = "8d5390a5-a437-437b-b6de-b01d872a618b",
                            ConcurrencyStamp = "17e9fecc-a56a-4ed7-ab67-4e8eb4521f46",
                            Name = "DNS User",
                            NormalizedName = "DNS USER"
                        },
                        new
                        {
                            Id = "ce6e9e5a-5338-4450-b776-592c21a08440",
                            ConcurrencyStamp = "d4c21d76-e9b9-40fb-a7c4-d0c620472487",
                            Name = "Static Data",
                            NormalizedName = "STATIC DATA"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DnsWebApp.Models.Database.Domain", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("DnsWebApp.Models.Database.Registrar", "Registrar")
                        .WithMany("Domains")
                        .HasForeignKey("RegistrarId");

                    b.HasOne("DnsWebApp.Models.Database.TopLevelDomain", "TopLevelDomain")
                        .WithMany("Domains")
                        .HasForeignKey("TopLevelDomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Registrar");

                    b.Navigation("TopLevelDomain");
                });

            modelBuilder.Entity("DnsWebApp.Models.Database.FavouriteDomains", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnsWebApp.Models.Database.Zone", "Zone")
                        .WithMany("FavouriteDomains")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("DnsWebApp.Models.Database.Record", b =>
                {
                    b.HasOne("DnsWebApp.Models.Database.ZoneGroup", "ZoneGroup")
                        .WithMany("Records")
                        .HasForeignKey("ZoneGroupId");

                    b.HasOne("DnsWebApp.Models.Database.Zone", "Zone")
                        .WithMany("Records")
                        .HasForeignKey("ZoneId");

                    b.Navigation("Zone");

                    b.Navigation("ZoneGroup");
                });

            modelBuilder.Entity("DnsWebApp.Models.Database.Registrar", b =>
                {
                    b.HasOne("DnsWebApp.Models.Database.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("DnsWebApp.Models.Database.RegistrarTldSupport", b =>
                {
                    b.HasOne("DnsWebApp.Models.Database.Registrar", "Registrar")
                        .WithMany("RegistrarTldSupports")
                        .HasForeignKey("RegistrarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnsWebApp.Models.Database.TopLevelDomain", "TopLevelDomain")
                        .WithMany("RegistrarTldSupports")
                        .HasForeignKey("TopLevelDomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Registrar");

                    b.Navigation("TopLevelDomain");
                });

            modelBuilder.Entity("DnsWebApp.Models.Database.Zone", b =>
                {
                    b.HasOne("DnsWebApp.Models.Database.Domain", "Domain")
                        .WithMany("Zones")
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnsWebApp.Models.Database.HorizonView", "HorizonView")
                        .WithMany("Zones")
                        .HasForeignKey("HorizonViewId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Domain");

                    b.Navigation("HorizonView");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DnsWebApp.Models.Database.ZoneGroup", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DnsWebApp.Models.Database.ZoneGroupMember", b =>
                {
                    b.HasOne("DnsWebApp.Models.Database.ZoneGroup", "ZoneGroup")
                        .WithMany("ZoneGroupMembers")
                        .HasForeignKey("ZoneGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnsWebApp.Models.Database.Zone", "Zone")
                        .WithMany("ZoneGroupMembers")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zone");

                    b.Navigation("ZoneGroup");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DnsWebApp.Models.Database.Domain", b =>
                {
                    b.Navigation("Zones");
                });

            modelBuilder.Entity("DnsWebApp.Models.Database.HorizonView", b =>
                {
                    b.Navigation("Zones");
                });

            modelBuilder.Entity("DnsWebApp.Models.Database.Registrar", b =>
                {
                    b.Navigation("Domains");

                    b.Navigation("RegistrarTldSupports");
                });

            modelBuilder.Entity("DnsWebApp.Models.Database.TopLevelDomain", b =>
                {
                    b.Navigation("Domains");

                    b.Navigation("RegistrarTldSupports");
                });

            modelBuilder.Entity("DnsWebApp.Models.Database.Zone", b =>
                {
                    b.Navigation("FavouriteDomains");

                    b.Navigation("Records");

                    b.Navigation("ZoneGroupMembers");
                });

            modelBuilder.Entity("DnsWebApp.Models.Database.ZoneGroup", b =>
                {
                    b.Navigation("Records");

                    b.Navigation("ZoneGroupMembers");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using LdapDnsWebApp.Models.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace LdapDnsWebApp.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20191202012837_TldNormalisation2")]
    partial class TldNormalisation2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("LdapDnsWebApp.Models.Database.Registrar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Registrar");
                });

            modelBuilder.Entity("LdapDnsWebApp.Models.Database.RegistrarTldSupport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("RegistrarId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("RenewalPrice")
                        .HasColumnType("numeric");

                    b.Property<long?>("TopLevelDomainId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RegistrarId");

                    b.HasIndex("TopLevelDomainId");

                    b.ToTable("RegistrarTldSupport");
                });

            modelBuilder.Entity("LdapDnsWebApp.Models.Database.TopLevelDomain", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WhoisServer")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Domain")
                        .IsUnique();

                    b.ToTable("TopLevelDomains");
                });

            modelBuilder.Entity("LdapDnsWebApp.Models.Database.Zone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Administrator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<int>("Expire")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrimaryNameServer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Refresh")
                        .HasColumnType("integer");

                    b.Property<long?>("RegistrarId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RegistrationExpiry")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Retry")
                        .HasColumnType("integer");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TimeToLive")
                        .HasColumnType("integer");

                    b.Property<long>("TopLevelDomainId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RegistrarId");

                    b.HasIndex("TopLevelDomainId");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("LdapDnsWebApp.Models.Database.ZoneRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TimeToLive")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ZoneId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId");

                    b.ToTable("ZoneRecord");
                });

            modelBuilder.Entity("LdapDnsWebApp.Models.Database.RegistrarTldSupport", b =>
                {
                    b.HasOne("LdapDnsWebApp.Models.Database.Registrar", "Registrar")
                        .WithMany("RegistrarTldSupports")
                        .HasForeignKey("RegistrarId");

                    b.HasOne("LdapDnsWebApp.Models.Database.TopLevelDomain", "TopLevelDomain")
                        .WithMany("RegistrarTldSupports")
                        .HasForeignKey("TopLevelDomainId");
                });

            modelBuilder.Entity("LdapDnsWebApp.Models.Database.Zone", b =>
                {
                    b.HasOne("LdapDnsWebApp.Models.Database.Registrar", "Registrar")
                        .WithMany("Zones")
                        .HasForeignKey("RegistrarId");

                    b.HasOne("LdapDnsWebApp.Models.Database.TopLevelDomain", "TopLevelDomain")
                        .WithMany("Zones")
                        .HasForeignKey("TopLevelDomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LdapDnsWebApp.Models.Database.ZoneRecord", b =>
                {
                    b.HasOne("LdapDnsWebApp.Models.Database.Zone", "Zone")
                        .WithMany("ZoneRecords")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
